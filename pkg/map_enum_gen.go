// Code generated by "enumer -type=Map"; DO NOT EDIT.

package hltv

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _MapName = "MirageInfernoNukeAnubisAncientOverpassVertigo"

var _MapIndex = [...]uint8{0, 6, 13, 17, 23, 30, 38, 45}

func (i Map) String() string {
	if i < 0 || i >= Map(len(_MapIndex)-1) {
		return fmt.Sprintf("Map(%d)", i)
	}
	return _MapName[_MapIndex[i]:_MapIndex[i+1]]
}

var _MapValues = []Map{0, 1, 2, 3, 4, 5, 6}

var _MapNames = []string{"Mirage", "Inferno", "Nuke", "Anubis", "Ancient", "Overpass", "Vertigo"}

var _MapNameToValueMap = map[string]Map{
	_MapName[0:6]:   0,
	_MapName[6:13]:  1,
	_MapName[13:17]: 2,
	_MapName[17:23]: 3,
	_MapName[23:30]: 4,
	_MapName[30:38]: 5,
	_MapName[38:45]: 6,
}

// MapString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MapString(s string) (Map, error) {

	if val, ok := _MapNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Map values", s)
}

func ParseMap(s string) (Map, error) {
	return MapString(s)
}

// MapValues returns all values of the enum
func MapValues() []Map {
	return _MapValues
}

func MapNames() []string {
	return _MapNames
}

// IsAMap returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Map) IsAMap() bool {
	for _, v := range _MapValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Map
func (i Map) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Map
func (i *Map) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Map should be a string, got %s", data)
	}

	var err error
	*i, err = MapString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Map
func (i Map) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Map
func (i *Map) UnmarshalText(text []byte) error {
	var err error
	*i, err = MapString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Map
func (i Map) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Map
func (i *Map) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = MapString(s)
	return err
}

func (i Map) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Map) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := MapString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
