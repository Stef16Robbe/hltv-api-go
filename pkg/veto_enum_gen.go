// Code generated by "enumer -type=Veto"; DO NOT EDIT.

package hltv

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _VetoName = "RemovedPicked"

var _VetoIndex = [...]uint8{0, 7, 13}

func (i Veto) String() string {
	if i < 0 || i >= Veto(len(_VetoIndex)-1) {
		return fmt.Sprintf("Veto(%d)", i)
	}
	return _VetoName[_VetoIndex[i]:_VetoIndex[i+1]]
}

var _VetoValues = []Veto{0, 1}

var _VetoNames = []string{"Removed", "Picked"}

var _VetoNameToValueMap = map[string]Veto{
	_VetoName[0:7]:  0,
	_VetoName[7:13]: 1,
}

// VetoString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VetoString(s string) (Veto, error) {

	if val, ok := _VetoNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Veto values", s)
}

func ParseVeto(s string) (Veto, error) {
	return VetoString(s)
}

// VetoValues returns all values of the enum
func VetoValues() []Veto {
	return _VetoValues
}

func VetoNames() []string {
	return _VetoNames
}

// IsAVeto returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Veto) IsAVeto() bool {
	for _, v := range _VetoValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Veto
func (i Veto) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Veto
func (i *Veto) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Veto should be a string, got %s", data)
	}

	var err error
	*i, err = VetoString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Veto
func (i Veto) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Veto
func (i *Veto) UnmarshalText(text []byte) error {
	var err error
	*i, err = VetoString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Veto
func (i Veto) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Veto
func (i *Veto) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = VetoString(s)
	return err
}

func (i Veto) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Veto) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := VetoString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
